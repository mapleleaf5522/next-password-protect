{"version":3,"file":"withPasswordProtect.js","sources":["../../../../src/hoc/withPasswordProtect.tsx"],"sourcesContent":["import React, { ElementType, useEffect, useState } from 'react';\nimport { useAmp } from 'next/amp';\nimport type { AppProps } from 'next/app';\n\nimport { NextRouter, useRouter } from 'next/dist/client/router';\nimport {\n  LoginComponent as DefaultLoginComponent,\n  LoginComponentProps,\n} from './LoginComponent';\n\ninterface PasswordProtectHOCOptions {\n  /* @default /api/passwordCheck */\n  checkApiUrl?: string;\n  /* @default /api/login */\n  loginApiUrl?: string;\n  loginComponent?: ElementType;\n  loginComponentProps?: Omit<LoginComponentProps, 'apiUrl'>;\n  bypassProtectionForRoute?: (route: NextRouter) => boolean;\n}\n\n/// TODO: improve App typing\nexport const withPasswordProtect = (\n  App: any,\n  options?: PasswordProtectHOCOptions,\n) => {\n  const ProtectedApp = ({ Component, pageProps, ...props }: AppProps) => {\n    const isAmp = useAmp();\n    const [isAuthenticated, setAuthenticated] = useState<undefined | boolean>(\n      undefined,\n    );\n    const router = useRouter();\n\n    const checkIfLoggedIn = async () => {\n      try {\n        const res = await fetch(options?.checkApiUrl || '/api/passwordCheck', {\n          credentials: 'include',\n        });\n\n        if (res.status === 200) {\n          setAuthenticated(true);\n        } else {\n          setAuthenticated(false);\n        }\n      } catch (e) {\n        setAuthenticated(false);\n      }\n    };\n\n    useEffect(() => {\n      checkIfLoggedIn();\n    }, []);\n\n    if (isAuthenticated === undefined) {\n      return null;\n    }\n\n    const bypassProtection =\n      options?.bypassProtectionForRoute?.(router) ?? false;\n    if (isAuthenticated || bypassProtection) {\n      return <App Component={Component} pageProps={pageProps} {...props} />;\n    }\n\n    // AMP is not yet supported\n    if (isAmp) {\n      return null;\n    }\n\n    const LoginComponent: ElementType =\n      options?.loginComponent || DefaultLoginComponent;\n\n    return (\n      <LoginComponent\n        apiUrl={options?.loginApiUrl}\n        {...(options?.loginComponentProps || {})}\n      />\n    );\n  };\n\n  return ProtectedApp;\n};\n"],"names":["withPasswordProtect","App","options","_a","Component","pageProps","props","isAmp","useAmp","_d","useState","undefined","isAuthenticated","setAuthenticated","router","useRouter","useEffect","fetch","checkApiUrl","credentials","status","bypassProtection","bypassProtectionForRoute","React","LoginComponent","loginComponent","DefaultLoginComponent","apiUrl","loginApiUrl","loginComponentProps"],"mappings":"yWAqBaA,EAAsB,SACjCC,EACAC,UAEqB,SAACC,WAAEC,cAAWC,cAAcC,MAA3B,2BACdC,EAAQC,IACRC,EAAsCC,OAC1CC,GADKC,OAAiBC,OAGlBC,EAASC,OAkBfC,GAAU,gIAdYC,OAAMf,MAAAA,SAAAA,EAASgB,cAAe,qBAAsB,CACpEC,YAAa,2BAGI,MAJPhB,SAIJiB,OACNP,GAAiB,GAEjBA,GAAiB,gCAGnBA,GAAiB,mCAMlB,SAEqBF,IAApBC,SACK,SAGHS,sBACJnB,MAAAA,SAAAA,EAASoB,oDAATpB,EAAoCY,sBAClCF,GAAmBS,SACdE,gBAACtB,KAAIG,UAAWA,EAAWC,UAAWA,GAAeC,OAI1DC,SACK,SAGHiB,GACJtB,MAAAA,SAAAA,EAASuB,iBAAkBC,SAG3BH,gBAACC,KACCG,OAAQzB,MAAAA,SAAAA,EAAS0B,cACZ1B,MAAAA,SAAAA,EAAS2B,sBAAuB"}