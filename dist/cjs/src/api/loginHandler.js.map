{"version":3,"file":"loginHandler.js","sources":["../../../../src/api/loginHandler.ts"],"sourcesContent":["import { Request, Response } from 'express';\nimport jwt from 'jsonwebtoken';\nimport compare from 'safe-compare';\n\nimport { sendJson } from './sendJson';\nimport { setCookie } from './setCookie';\n\ninterface PasswordProtectHandlerOptions {\n  cookieMaxAge?: number;\n  /* @default next-password-protect */\n  cookieName?: string;\n  cookieSameSite?: boolean | 'lax' | 'none' | 'strict';\n  cookieSecure?: boolean;\n  domain?: string;\n}\n\nexport const loginHandler = (\n  password: string,\n  options?: PasswordProtectHandlerOptions,\n) => async (req: Request, res: Response) => {\n  res.setHeader('Content-Type', 'application/json');\n\n  try {\n    if (req.method !== 'POST') {\n      throw new Error('Invalid method.');\n    }\n\n    if (!req.body.password) {\n      throw new Error('Invalid request.');\n    }\n\n    const { password: providedPassword } = req.body;\n\n    if (compare(providedPassword, password)) {\n      setCookie(\n        res,\n        options?.cookieName || 'next-password-protect',\n        /* NOTE: It's not usual to use the password as JWT secret, but since you already\n         * have access to the environment when you know the password, in this specific\n         * use case it doesn't add any value for an intruder if the secret is known.\n         */\n        jwt.sign({}, password),\n        {\n          domain: options?.domain,\n          httpOnly: true,\n          sameSite: options?.cookieSameSite || false,\n          secure:\n            options?.cookieSecure !== undefined\n              ? options?.cookieSecure\n              : process.env.NODE_ENV === 'production',\n          path: '/',\n          ...(options?.cookieMaxAge\n            ? {\n                maxAge: options?.cookieMaxAge,\n              }\n            : {}),\n        },\n      );\n\n      sendJson(res, 200);\n      return;\n    }\n\n    sendJson(res, 400, { message: 'Incorrect password.' });\n  } catch (err) {\n    sendJson(res, 500, { message: err.message || 'An error has occured.' });\n  }\n};\n"],"names":["password","options","req","res","setHeader","method","Error","body","providedPassword","compare","setCookie","cookieName","jwt","sign","domain","httpOnly","sameSite","cookieSameSite","secure","undefined","cookieSecure","process","env","NODE_ENV","path","cookieMaxAge","maxAge","sendJson","message","err"],"mappings":"mTAgB4B,SAC1BA,EACAC,UACG,SAAOC,EAAcC,oGACxBA,EAAIC,UAAU,eAAgB,2BAGT,SAAfF,EAAIG,aACA,IAAIC,MAAM,uBAGbJ,EAAIK,KAAKP,eACN,IAAIM,MAAM,uBAGAE,EAAqBN,EAAIK,cAEvCE,UAAQD,EAAkBR,UAC5BU,YACEP,GACAF,MAAAA,SAAAA,EAASU,aAAc,wBAKvBC,UAAIC,KAAK,GAAIb,eAEXc,OAAQb,MAAAA,SAAAA,EAASa,OACjBC,UAAU,EACVC,UAAUf,MAAAA,SAAAA,EAASgB,kBAAkB,EACrCC,YAC4BC,KAA1BlB,MAAAA,SAAAA,EAASmB,cACLnB,MAAAA,SAAAA,EAASmB,aACgB,eAAzBC,QAAQC,IAAIC,SAClBC,KAAM,MACFvB,MAAAA,SAAAA,EAASwB,cACT,CACEC,OAAQzB,MAAAA,SAAAA,EAASwB,cAEnB,KAIRE,WAASxB,EAAK,SAIhBwB,WAASxB,EAAK,IAAK,CAAEyB,QAAS,wBAC9B,MAAOC,GACPF,WAASxB,EAAK,IAAK,CAAEyB,QAASC,EAAID,SAAW"}